LINK TO Github Repository
PROJECT DETAILS:

1.Retrieving the file names in an ascending order

2.Business-level operations:
a)Option to add a user specified file to the application
b)Option to delete a user specified file from the application
c)Option to search a user specified file from the application
d)Navigation option to close the current execution context and return to the main context

3.Option to close the application.

DEVELOPER DETAILS:
Name: 

CORE CONCEPTS USED IN PROJECT:

1.Files: We use a file concept Files.list() to Iterate over all files and sub-directories. It Iterates over a directory and gets the List<File> using Files.list() method.

2.Classes: Classes are used to provide shortcuts and helps throughout programming.  In user defined classes, we then add functions (known as methods) to that user class for common things that users might need to do.

3.Objects: Objects are used because they can be created to call a non-static function which are not present inside the Main Method but present inside the Class and also provide the name to the space which is being used to store the data.

4.Loops (do while): The Java do-while loop is used to iterate a part of the program repeatedly, until the specified condition is true. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use a do-while loop.

Java do-while loop is called an exit control loop. Therefore, unlike while loop and for loop, the do-while check the condition at the end of loop body. The Java do-while loop is executed at least once because condition is checked after loop body.

5.Switch: The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. The switch statement works with byte, short, int, long, enum types, String and some wrapper types like Byte, Short, Int, and Long. Since Java 7, you can use strings in the switch statement.

In other words, the switch statement tests the equality of a variable against multiple values.

6.Exception Handling : Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.

Java try block is used to enclose the code that might throw an exception. It must be used within the method. If an exception occurs at the particular statement in the try block, the rest of the block code will not execute. So, it is recommended not to keep the code in try block that will not throw an exception. Java try block must be followed by either catch or finally block.

Java catch block is used to handle the Exception by declaring the type of exception within the parameter. The declared exception must be the parent class exception ( i.e., Exception) or the generated exception type. However, the good approach is to declare the generated type of exception.
The catch block must be used after the try block only. You can use multiple catch block with a single try block.










